-- Migration: Create daily_user_activity table for tracking engagement and check-in streaks
-- This table stores a single record per user per day with boolean flags for key activities

-- Create the daily_user_activity table
CREATE TABLE IF NOT EXISTS public.daily_user_activity (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  activity_date DATE NOT NULL DEFAULT CURRENT_DATE,
  was_active BOOLEAN NOT NULL DEFAULT FALSE,
  completed_check_in BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  
  -- Ensure only one record exists per user per day
  UNIQUE (user_id, activity_date)
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_daily_user_activity_user_id ON public.daily_user_activity(user_id);
CREATE INDEX IF NOT EXISTS idx_daily_user_activity_date ON public.daily_user_activity(activity_date DESC);
CREATE INDEX IF NOT EXISTS idx_daily_user_activity_user_date ON public.daily_user_activity(user_id, activity_date DESC);

-- Enable Row Level Security
ALTER TABLE public.daily_user_activity ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Allow users to manage their own activity" ON public.daily_user_activity;

-- Policy: Users can only see and manage their own activity
CREATE POLICY "Allow users to manage their own activity"
ON public.daily_user_activity
FOR ALL
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Add comment to table
COMMENT ON TABLE public.daily_user_activity IS 'Tracks daily user activities for engagement and check-in streaks';
COMMENT ON COLUMN public.daily_user_activity.was_active IS 'True if user logged in or visited the site while authenticated on this date';
COMMENT ON COLUMN public.daily_user_activity.completed_check_in IS 'True if user completed their MEPSS check-in on this date';

